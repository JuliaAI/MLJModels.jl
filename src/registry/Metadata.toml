
[NearestNeighbors.KNNClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s97,1} where _s97<:ScientificTypes.Finite`"
":is_pure_julia" = "`true`"
":package_name" = "NearestNeighbors"
":package_license" = "MIT"
":load_path" = "MLJModels.NearestNeighbors_.KNNClassifier"
":package_uuid" = "b8a86587-4115-5ab1-83bc-aa920d37bbce"
":package_url" = "https://github.com/KristofferC/NearestNeighbors.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "K-Nearest Neighbors classifier: predicts the class associated with a new point\nby taking a vote over the classes of the K-nearest points.\n\n→ based on [NearestNeighbors](https://github.com/KristofferC/NearestNeighbors.jl)\n→ do `@load KNNClassifier` to use the model\n→ do `?KNNClassifier` for documentation."
":name" = "KNNClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":K", ":algorithm", ":metric", ":leafsize", ":reorder", ":weights"]
":hyperparameter_types" = ["Int64", "Symbol", "Distances.Metric", "Int64", "Bool", "Symbol"]

[NearestNeighbors.KNNRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "NearestNeighbors"
":package_license" = "MIT"
":load_path" = "MLJModels.NearestNeighbors_.KNNRegressor"
":package_uuid" = "b8a86587-4115-5ab1-83bc-aa920d37bbce"
":package_url" = "https://github.com/KristofferC/NearestNeighbors.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "K-Nearest Neighbors regressor: predicts the response associated with a new point\nby taking an average of the response of the K-nearest points.\n\n→ based on [NearestNeighbors](https://github.com/KristofferC/NearestNeighbors.jl)\n→ do `@load KNNRegressor` to use the model\n→ do `?KNNRegressor` for documentation."
":name" = "KNNRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":K", ":algorithm", ":metric", ":leafsize", ":reorder", ":weights"]
":hyperparameter_types" = ["Int64", "Symbol", "Distances.Metric", "Int64", "Bool", "Symbol"]

[ScikitLearn.ProbabilisticSGDClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s567,1} where _s567<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.ProbabilisticSGDClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Linear classifier with stochastic gradient descent training.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load ProbabilisticSGDClassifier` to use the model\n→ do `?ProbabilisticSGDClassifier` for documentation."
":name" = "ProbabilisticSGDClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":loss", ":penalty", ":alpha", ":l1_ratio", ":fit_intercept", ":max_iter", ":tol", ":shuffle", ":verbose", ":epsilon", ":n_jobs", ":random_state", ":learning_rate", ":eta0", ":power_t", ":early_stopping", ":validation_fraction", ":n_iter_no_change", ":class_weight", ":warm_start", ":average"]
":hyperparameter_types" = ["String", "String", "Float64", "Float64", "Bool", "Int64", "Union{Nothing, Float64}", "Bool", "Int64", "Float64", "Union{Nothing, Int64}", "Any", "String", "Float64", "Float64", "Bool", "Float64", "Int64", "Any", "Bool", "Bool"]

[ScikitLearn.RidgeCVClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s431,1} where _s431<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.RidgeCVClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Ridge regression classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load RidgeCVClassifier` to use the model\n→ do `?RidgeCVClassifier` for documentation."
":name" = "RidgeCVClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alphas", ":fit_intercept", ":normalize", ":scoring", ":cv", ":class_weight", ":store_cv_values"]
":hyperparameter_types" = ["AbstractArray{Float64,N} where N", "Bool", "Bool", "Any", "Int64", "Any", "Bool"]

[ScikitLearn.LogisticClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s431,1} where _s431<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.LogisticClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Logistic regression classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load LogisticClassifier` to use the model\n→ do `?LogisticClassifier` for documentation."
":name" = "LogisticClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":penalty", ":dual", ":tol", ":C", ":fit_intercept", ":intercept_scaling", ":class_weight", ":random_state", ":solver", ":max_iter", ":multi_class", ":verbose", ":warm_start", ":n_jobs", ":l1_ratio"]
":hyperparameter_types" = ["String", "Bool", "Float64", "Float64", "Bool", "Float64", "Any", "Any", "String", "Int64", "String", "Int64", "Bool", "Union{Nothing, Int64}", "Union{Nothing, Float64}"]

[ScikitLearn.RandomForestRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.RandomForestRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "RandomForestRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "RandomForestRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_estimators", ":criterion", ":max_depth", ":min_samples_split", ":min_samples_leaf", ":min_weight_fraction_leaf", ":max_features", ":max_leaf_nodes", ":min_impurity_decrease", ":bootstrap", ":oob_score", ":n_jobs", ":random_state", ":verbose", ":warm_start"]
":hyperparameter_types" = ["Int64", "String", "Union{Nothing, Int64}", "Union{Float64, Int64}", "Union{Float64, Int64}", "Float64", "Union{Nothing, Float64, Int64, String}", "Union{Nothing, Int64}", "Float64", "Bool", "Bool", "Union{Nothing, Int64}", "Any", "Int64", "Bool"]

[ScikitLearn.ElasticNetCVRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.ElasticNetCVRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "ElasticNetCVRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "ElasticNetCVRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":l1_ratio", ":eps", ":n_alphas", ":alphas", ":fit_intercept", ":normalize", ":precompute", ":max_iter", ":tol", ":cv", ":copy_X", ":verbose", ":n_jobs", ":positive", ":random_state", ":selection"]
":hyperparameter_types" = ["Union{Float64, Array{Float64,1}}", "Float64", "Int64", "Any", "Bool", "Bool", "Union{Bool, String, AbstractArray{T,2} where T}", "Int64", "Float64", "Any", "Bool", "Union{Bool, Int64}", "Union{Nothing, Int64}", "Bool", "Any", "String"]

[ScikitLearn.PerceptronClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s431,1} where _s431<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.PerceptronClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Perceptron classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load PerceptronClassifier` to use the model\n→ do `?PerceptronClassifier` for documentation."
":name" = "PerceptronClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":penalty", ":alpha", ":fit_intercept", ":max_iter", ":tol", ":shuffle", ":verbose", ":eta0", ":n_jobs", ":random_state", ":early_stopping", ":validation_fraction", ":n_iter_no_change", ":class_weight", ":warm_start"]
":hyperparameter_types" = ["Union{Nothing, String}", "Float64", "Bool", "Int64", "Union{Nothing, Float64}", "Bool", "Int64", "Float64", "Union{Nothing, Int64}", "Any", "Bool", "Float64", "Int64", "Any", "Bool"]

[ScikitLearn.MultiTaskLassoRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.MultiTaskLassoRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "MultiTaskLassoRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "MultiTaskLassoRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":fit_intercept", ":normalize", ":max_iter", ":tol", ":copy_X", ":random_state", ":selection"]
":hyperparameter_types" = ["Float64", "Bool", "Bool", "Int64", "Float64", "Bool", "Any", "String"]

[ScikitLearn.LinearRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.LinearRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LinearRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "LinearRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":fit_intercept", ":normalize", ":copy_X", ":n_jobs"]
":hyperparameter_types" = ["Bool", "Bool", "Bool", "Union{Nothing, Int64}"]

[ScikitLearn.RidgeRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.RidgeRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "RidgeRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "RidgeRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":fit_intercept", ":normalize", ":copy_X", ":max_iter", ":tol", ":solver", ":random_state"]
":hyperparameter_types" = ["Union{Float64, Array{Float64,1}}", "Bool", "Bool", "Bool", "Int64", "Float64", "String", "Any"]

[ScikitLearn.LassoLarsICRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.LassoLarsICRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LassoLarsICRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "LassoLarsICRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":criterion", ":fit_intercept", ":verbose", ":normalize", ":precompute", ":max_iter", ":eps", ":copy_X", ":positive"]
":hyperparameter_types" = ["String", "Bool", "Union{Bool, Int64}", "Bool", "Union{Bool, String, AbstractArray{T,2} where T}", "Int64", "Float64", "Bool", "Any"]

[ScikitLearn.ARDRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.ARDRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "ARDRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "ARDRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_iter", ":tol", ":alpha_1", ":alpha_2", ":lambda_1", ":lambda_2", ":compute_score", ":threshold_lambda", ":fit_intercept", ":normalize", ":copy_X", ":verbose"]
":hyperparameter_types" = ["Int64", "Float64", "Float64", "Float64", "Float64", "Float64", "Bool", "Float64", "Bool", "Bool", "Bool", "Bool"]

[ScikitLearn.SVMNuRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "unknown"
":load_path" = "MLJModels.ScikitLearn_.SVMNuRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "SVMNuRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "SVMNuRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":nu", ":C", ":kernel", ":degree", ":gamma", ":coef0", ":shrinking", ":tol", ":cache_size", ":max_iter"]
":hyperparameter_types" = ["Float64", "Float64", "Union{Function, String}", "Int64", "Union{Float64, String}", "Float64", "Bool", "Float64", "Float64", "Int64"]

[ScikitLearn.RidgeClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s431,1} where _s431<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.RidgeClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Ridge regression classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load RidgeClassifier` to use the model\n→ do `?RidgeClassifier` for documentation."
":name" = "RidgeClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":fit_intercept", ":normalize", ":copy_X", ":max_iter", ":tol", ":class_weight", ":solver", ":random_state"]
":hyperparameter_types" = ["Float64", "Bool", "Bool", "Bool", "Union{Nothing, Int64}", "Float64", "Any", "String", "Any"]

[ScikitLearn.SGDRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.SGDRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "SGDRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "SGDRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":loss", ":penalty", ":alpha", ":l1_ratio", ":fit_intercept", ":max_iter", ":tol", ":shuffle", ":verbose", ":epsilon", ":random_state", ":learning_rate", ":eta0", ":power_t", ":early_stopping", ":validation_fraction", ":n_iter_no_change", ":warm_start", ":average"]
":hyperparameter_types" = ["String", "String", "Float64", "Float64", "Bool", "Int64", "Float64", "Bool", "Union{Bool, Int64}", "Float64", "Any", "String", "Float64", "Float64", "Bool", "Float64", "Int64", "Bool", "Union{Bool, Int64}"]

[ScikitLearn.ComplementNBClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Count)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.ComplementNBClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Similar to Multinomial NB classifier but with more robust assumptions. Suited for imbalanced datasets.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load ComplementNBClassifier` to use the model\n→ do `?ComplementNBClassifier` for documentation."
":name" = "ComplementNBClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":fit_prior", ":class_prior", ":norm"]
":hyperparameter_types" = ["Float64", "Bool", "Union{Nothing, AbstractArray{T,1} where T}", "Bool"]

[ScikitLearn.HuberRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.HuberRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "HuberRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "HuberRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":epsilon", ":max_iter", ":alpha", ":warm_start", ":fit_intercept", ":tol"]
":hyperparameter_types" = ["Float64", "Int64", "Float64", "Bool", "Bool", "Float64"]

[ScikitLearn.SVMNuClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s96,1} where _s96<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "unknown"
":load_path" = "MLJModels.ScikitLearn_.SVMNuClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "SVMNuClassifier from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "SVMNuClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":nu", ":kernel", ":degree", ":gamma", ":coef0", ":shrinking", ":tol", ":cache_size", ":max_iter", ":decision_function_shape", ":random_state"]
":hyperparameter_types" = ["Float64", "Union{Function, String}", "Int64", "Union{Float64, String}", "Float64", "Bool", "Float64", "Float64", "Int64", "String", "Any"]

[ScikitLearn.GradientBoostingClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.GradientBoostingClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Gradient boosting ensemble classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load GradientBoostingClassifier` to use the model\n→ do `?GradientBoostingClassifier` for documentation."
":name" = "GradientBoostingClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":loss", ":learning_rate", ":n_estimators", ":subsample", ":criterion", ":min_samples_split", ":min_samples_leaf", ":min_weight_fraction_leaf", ":max_depth", ":min_impurity_decrease", ":init", ":random_state", ":max_features", ":verbose", ":max_leaf_nodes", ":warm_start", ":presort", ":validation_fraction", ":n_iter_no_change", ":tol"]
":hyperparameter_types" = ["String", "Float64", "Int64", "Float64", "String", "Union{Float64, Int64}", "Union{Float64, Int64}", "Float64", "Int64", "Float64", "Any", "Any", "Union{Nothing, Float64, Int64, String}", "Int64", "Union{Nothing, Int64}", "Bool", "Union{Bool, String}", "Float64", "Union{Nothing, Int64}", "Float64"]

[ScikitLearn.GaussianProcessRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.GaussianProcessRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "GaussianProcessRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "GaussianProcessRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":kernel", ":alpha", ":optimizer", ":n_restarts_optimizer", ":normalize_y", ":copy_X_train", ":random_state"]
":hyperparameter_types" = ["Any", "Union{Float64, AbstractArray}", "Any", "Int64", "Bool", "Bool", "Any"]

[ScikitLearn.LarsRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.LarsRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LarsRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "LarsRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":fit_intercept", ":verbose", ":normalize", ":precompute", ":n_nonzero_coefs", ":eps", ":copy_X", ":fit_path"]
":hyperparameter_types" = ["Bool", "Union{Bool, Int64}", "Bool", "Union{Bool, String, AbstractArray{T,2} where T}", "Int64", "Float64", "Bool", "Bool"]

[ScikitLearn.SVMLClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s96,1} where _s96<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "unknown"
":load_path" = "MLJModels.ScikitLearn_.SVMLClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "SVMLClassifier from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "SVMLClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":C", ":loss", ":dual", ":penalty", ":tol", ":max_iter", ":intercept_scaling", ":random_state"]
":hyperparameter_types" = ["Float64", "String", "Bool", "String", "Float64", "Int64", "Float64", "Any"]

[ScikitLearn.AdaBoostRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.AdaBoostRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "AdaBoostRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "AdaBoostRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":base_estimator", ":n_estimators", ":learning_rate", ":loss", ":random_state"]
":hyperparameter_types" = ["Any", "Int64", "Float64", "String", "Any"]

[ScikitLearn.MultiTaskLassoCVRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.MultiTaskLassoCVRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "MultiTaskLassoCVRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "MultiTaskLassoCVRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":eps", ":n_alphas", ":alphas", ":fit_intercept", ":normalize", ":max_iter", ":tol", ":copy_X", ":cv", ":verbose", ":n_jobs", ":random_state", ":selection"]
":hyperparameter_types" = ["Float64", "Int64", "Any", "Bool", "Bool", "Int64", "Float64", "Bool", "Any", "Union{Bool, Int64}", "Union{Nothing, Int64}", "Any", "String"]

[ScikitLearn.OrthogonalMatchingPursuitRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.OrthogonalMatchingPursuitRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "OrthogonalMatchingPursuitRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "OrthogonalMatchingPursuitRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_nonzero_coefs", ":tol", ":fit_intercept", ":normalize", ":precompute"]
":hyperparameter_types" = ["Union{Nothing, Int64}", "Union{Nothing, Float64}", "Bool", "Bool", "Union{Bool, String, AbstractArray{T,2} where T}"]

[ScikitLearn.RidgeCVRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.RidgeCVRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "RidgeCVRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "RidgeCVRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alphas", ":fit_intercept", ":normalize", ":scoring", ":cv", ":gcv_mode", ":store_cv_values"]
":hyperparameter_types" = ["Any", "Bool", "Bool", "Any", "Any", "Union{Nothing, String}", "Bool"]

[ScikitLearn.PassiveAggressiveClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s431,1} where _s431<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.PassiveAggressiveClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Passive aggressive classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load PassiveAggressiveClassifier` to use the model\n→ do `?PassiveAggressiveClassifier` for documentation."
":name" = "PassiveAggressiveClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":C", ":fit_intercept", ":max_iter", ":tol", ":early_stopping", ":validation_fraction", ":n_iter_no_change", ":shuffle", ":verbose", ":loss", ":n_jobs", ":random_state", ":warm_start", ":class_weight", ":average"]
":hyperparameter_types" = ["Float64", "Bool", "Int64", "Float64", "Bool", "Float64", "Int64", "Bool", "Int64", "String", "Union{Nothing, Int64}", "Any", "Bool", "Any", "Bool"]

[ScikitLearn.SVMRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "unknown"
":load_path" = "MLJModels.ScikitLearn_.SVMRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "SVMRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "SVMRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":C", ":kernel", ":degree", ":gamma", ":coef0", ":shrinking", ":tol", ":cache_size", ":max_iter", ":epsilon"]
":hyperparameter_types" = ["Float64", "Union{Function, String}", "Int64", "Union{Float64, String}", "Float64", "Bool", "Float64", "Float64", "Int64", "Float64"]

[ScikitLearn.BernoulliNBClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Count)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.BernoulliNBClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Binomial naive bayes classifier. It is suitable for classification with binary features; features will be binarized based on the `binarize` keyword (unless it's `nothing` in which\n    case the features are assumed to be binary).\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load BernoulliNBClassifier` to use the model\n→ do `?BernoulliNBClassifier` for documentation."
":name" = "BernoulliNBClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":binarize", ":fit_prior", ":class_prior"]
":hyperparameter_types" = ["Float64", "Union{Nothing, Float64}", "Bool", "Union{Nothing, AbstractArray{T,1} where T}"]

[ScikitLearn.GaussianNBClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.GaussianNBClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Gaussian naive bayes model.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load GaussianNBClassifier` to use the model\n→ do `?GaussianNBClassifier` for documentation."
":name" = "GaussianNBClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":priors", ":var_smoothing"]
":hyperparameter_types" = ["Union{Nothing, AbstractArray{Float64,1}}", "Float64"]

[ScikitLearn.ExtraTreesClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.ExtraTreesClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Extra trees classifier, fits a number of randomized decision trees on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load ExtraTreesClassifier` to use the model\n→ do `?ExtraTreesClassifier` for documentation."
":name" = "ExtraTreesClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_estimators", ":criterion", ":max_depth", ":min_samples_split", ":min_samples_leaf", ":min_weight_fraction_leaf", ":max_features", ":max_leaf_nodes", ":min_impurity_decrease", ":bootstrap", ":oob_score", ":n_jobs", ":random_state", ":verbose", ":warm_start", ":class_weight"]
":hyperparameter_types" = ["Int64", "String", "Union{Nothing, Int64}", "Union{Float64, Int64}", "Union{Float64, Int64}", "Float64", "Union{Nothing, Float64, Int64, String}", "Union{Nothing, Int64}", "Float64", "Bool", "Bool", "Union{Nothing, Int64}", "Any", "Int64", "Bool", "Any"]

[ScikitLearn.MultiTaskElasticNetCVRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.MultiTaskElasticNetCVRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "MultiTaskElasticNetCVRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "MultiTaskElasticNetCVRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":l1_ratio", ":eps", ":n_alphas", ":alphas", ":fit_intercept", ":normalize", ":max_iter", ":tol", ":cv", ":copy_X", ":verbose", ":n_jobs", ":random_state", ":selection"]
":hyperparameter_types" = ["Union{Float64, Array{Float64,1}}", "Float64", "Int64", "Any", "Bool", "Bool", "Int64", "Float64", "Any", "Bool", "Union{Bool, Int64}", "Union{Nothing, Int64}", "Any", "String"]

[ScikitLearn.LassoLarsCVRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.LassoLarsCVRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LassoLarsCVRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "LassoLarsCVRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":fit_intercept", ":verbose", ":max_iter", ":normalize", ":precompute", ":cv", ":max_n_alphas", ":n_jobs", ":eps", ":copy_X", ":positive"]
":hyperparameter_types" = ["Bool", "Union{Bool, Int64}", "Int64", "Bool", "Union{Bool, String, AbstractArray{T,2} where T}", "Any", "Int64", "Union{Nothing, Int64}", "Float64", "Bool", "Any"]

[ScikitLearn.OrthogonalMatchingPursuitCVRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.OrthogonalMatchingPursuitCVRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "OrthogonalMatchingPursuitCVRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "OrthogonalMatchingPursuitCVRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":copy", ":fit_intercept", ":normalize", ":max_iter", ":cv", ":n_jobs", ":verbose"]
":hyperparameter_types" = ["Bool", "Bool", "Bool", "Union{Nothing, Int64}", "Any", "Union{Nothing, Int64}", "Union{Bool, Int64}"]

[ScikitLearn.AdaBoostClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s567,1} where _s567<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.AdaBoostClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Adaboost ensemble classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load AdaBoostClassifier` to use the model\n→ do `?AdaBoostClassifier` for documentation."
":name" = "AdaBoostClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":base_estimator", ":n_estimators", ":learning_rate", ":algorithm", ":random_state"]
":hyperparameter_types" = ["Any", "Int64", "Float64", "String", "Any"]

[ScikitLearn.PassiveAggressiveRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.PassiveAggressiveRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "PassiveAggressiveRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "PassiveAggressiveRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":C", ":fit_intercept", ":max_iter", ":tol", ":early_stopping", ":validation_fraction", ":n_iter_no_change", ":shuffle", ":verbose", ":loss", ":epsilon", ":random_state", ":warm_start", ":average"]
":hyperparameter_types" = ["Float64", "Bool", "Int64", "Float64", "Bool", "Float64", "Int64", "Bool", "Union{Bool, Int64}", "String", "Float64", "Any", "Bool", "Union{Bool, Int64}"]

[ScikitLearn.BayesianRidgeRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.BayesianRidgeRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "BayesianRidgeRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "BayesianRidgeRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_iter", ":tol", ":alpha_1", ":alpha_2", ":lambda_1", ":lambda_2", ":compute_score", ":fit_intercept", ":normalize", ":copy_X", ":verbose"]
":hyperparameter_types" = ["Int64", "Float64", "Float64", "Float64", "Float64", "Float64", "Bool", "Bool", "Bool", "Bool", "Bool"]

[ScikitLearn.RANSACRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.RANSACRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "RANSACRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "RANSACRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":base_estimator", ":min_samples", ":residual_threshold", ":is_data_valid", ":is_model_valid", ":max_trials", ":max_skips", ":stop_n_inliers", ":stop_score", ":stop_probability", ":loss", ":random_state"]
":hyperparameter_types" = ["Any", "Union{Float64, Int64}", "Union{Nothing, Float64}", "Any", "Any", "Int64", "Int64", "Int64", "Float64", "Float64", "Union{Function, String}", "Any"]

[ScikitLearn.BaggingClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s567,1} where _s567<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.BaggingClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Bagging ensemble classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load BaggingClassifier` to use the model\n→ do `?BaggingClassifier` for documentation."
":name" = "BaggingClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":base_estimator", ":n_estimators", ":max_samples", ":max_features", ":bootstrap", ":bootstrap_features", ":oob_score", ":warm_start", ":n_jobs", ":random_state", ":verbose"]
":hyperparameter_types" = ["Any", "Int64", "Union{Float64, Int64}", "Union{Float64, Int64}", "Bool", "Bool", "Bool", "Bool", "Union{Nothing, Int64}", "Any", "Int64"]

[ScikitLearn.GaussianProcessClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s567,1} where _s567<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.GaussianProcessClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Gaussian process classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load GaussianProcessClassifier` to use the model\n→ do `?GaussianProcessClassifier` for documentation."
":name" = "GaussianProcessClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":kernel", ":optimizer", ":n_restarts_optimizer", ":copy_X_train", ":random_state", ":max_iter_predict", ":warm_start", ":multi_class"]
":hyperparameter_types" = ["Any", "Any", "Int64", "Bool", "Any", "Int64", "Bool", "String"]

[ScikitLearn.KNeighborsRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.KNeighborsRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "K-Nearest Neighbors regressor: predicts the response associated with a new point\n    by taking an average of the response of the K-nearest points.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load KNeighborsRegressor` to use the model\n→ do `?KNeighborsRegressor` for documentation."
":name" = "KNeighborsRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_neighbors", ":weights", ":algorithm", ":leaf_size", ":p", ":metric", ":metric_params", ":n_jobs"]
":hyperparameter_types" = ["Int64", "Union{Function, String}", "String", "Int64", "Int64", "Any", "Any", "Union{Nothing, Int64}"]

[ScikitLearn.LassoCVRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.LassoCVRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LassoCVRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "LassoCVRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":eps", ":n_alphas", ":alphas", ":fit_intercept", ":normalize", ":precompute", ":max_iter", ":tol", ":copy_X", ":cv", ":verbose", ":n_jobs", ":positive", ":random_state", ":selection"]
":hyperparameter_types" = ["Float64", "Int64", "Any", "Bool", "Bool", "Union{Bool, String, AbstractArray{T,2} where T}", "Int64", "Float64", "Bool", "Any", "Union{Bool, Int64}", "Union{Nothing, Int64}", "Bool", "Int64", "String"]

[ScikitLearn.DummyRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.DummyRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "DummyRegressor is a regressor that makes predictions using simple rules.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load DummyRegressor` to use the model\n→ do `?DummyRegressor` for documentation."
":name" = "DummyRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":strategy", ":constant", ":quantile"]
":hyperparameter_types" = ["String", "Any", "Float64"]

[ScikitLearn.LassoLarsRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.LassoLarsRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LassoLarsRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "LassoLarsRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":fit_intercept", ":verbose", ":normalize", ":precompute", ":max_iter", ":eps", ":copy_X", ":fit_path", ":positive"]
":hyperparameter_types" = ["Float64", "Bool", "Union{Bool, Int64}", "Bool", "Union{Bool, String, AbstractArray{T,2} where T}", "Int64", "Float64", "Bool", "Bool", "Any"]

[ScikitLearn.LarsCVRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.LarsCVRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LarsCVRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "LarsCVRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":fit_intercept", ":verbose", ":max_iter", ":normalize", ":precompute", ":cv", ":max_n_alphas", ":n_jobs", ":eps", ":copy_X"]
":hyperparameter_types" = ["Bool", "Union{Bool, Int64}", "Int64", "Bool", "Union{Bool, String, AbstractArray{T,2} where T}", "Any", "Int64", "Union{Nothing, Int64}", "Float64", "Bool"]

[ScikitLearn.KNeighborsClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.KNeighborsClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "K-Nearest Neighbors classifier: predicts the class associated with a new point\n    by taking a vote over the classes of the K-nearest points.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load KNeighborsClassifier` to use the model\n→ do `?KNeighborsClassifier` for documentation."
":name" = "KNeighborsClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_neighbors", ":weights", ":algorithm", ":leaf_size", ":p", ":metric", ":metric_params", ":n_jobs"]
":hyperparameter_types" = ["Int64", "Union{Function, String}", "String", "Int64", "Int64", "Any", "Any", "Union{Nothing, Int64}"]

[ScikitLearn.DummyClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.DummyClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "DummyClassifier is a classifier that makes predictions using simple rules.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load DummyClassifier` to use the model\n→ do `?DummyClassifier` for documentation."
":name" = "DummyClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":strategy", ":constant", ":random_state"]
":hyperparameter_types" = ["String", "Any", "Any"]

[ScikitLearn.BaggingRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.BaggingRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "BaggingRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "BaggingRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":base_estimator", ":n_estimators", ":max_samples", ":max_features", ":bootstrap", ":bootstrap_features", ":oob_score", ":warm_start", ":n_jobs", ":random_state", ":verbose"]
":hyperparameter_types" = ["Any", "Int64", "Union{Float64, Int64}", "Union{Float64, Int64}", "Bool", "Bool", "Bool", "Bool", "Union{Nothing, Int64}", "Any", "Int64"]

[ScikitLearn.SGDClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s567,1} where _s567<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.SGDClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Linear classifier with stochastic gradient descent training.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load SGDClassifier` to use the model\n→ do `?SGDClassifier` for documentation."
":name" = "SGDClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":loss", ":penalty", ":alpha", ":l1_ratio", ":fit_intercept", ":max_iter", ":tol", ":shuffle", ":verbose", ":epsilon", ":n_jobs", ":random_state", ":learning_rate", ":eta0", ":power_t", ":early_stopping", ":validation_fraction", ":n_iter_no_change", ":class_weight", ":warm_start", ":average"]
":hyperparameter_types" = ["String", "String", "Float64", "Float64", "Bool", "Int64", "Union{Nothing, Float64}", "Bool", "Int64", "Float64", "Union{Nothing, Int64}", "Any", "String", "Float64", "Float64", "Bool", "Float64", "Int64", "Any", "Bool", "Bool"]

[ScikitLearn.TheilSenRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.TheilSenRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "TheilSenRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "TheilSenRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":fit_intercept", ":copy_X", ":max_subpopulation", ":n_subsamples", ":max_iter", ":tol", ":random_state", ":n_jobs", ":verbose"]
":hyperparameter_types" = ["Bool", "Bool", "Int64", "Union{Nothing, Int64}", "Int64", "Float64", "Any", "Union{Nothing, Int64}", "Bool"]

[ScikitLearn.ElasticNetRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.ElasticNetRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "ElasticNetRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "ElasticNetRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":l1_ratio", ":fit_intercept", ":normalize", ":precompute", ":max_iter", ":copy_X", ":tol", ":warm_start", ":positive", ":random_state", ":selection"]
":hyperparameter_types" = ["Float64", "Float64", "Bool", "Bool", "Union{Bool, AbstractArray{T,2} where T}", "Int64", "Bool", "Float64", "Bool", "Bool", "Any", "String"]

[ScikitLearn.RandomForestClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.RandomForestClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Random forest classifier.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load RandomForestClassifier` to use the model\n→ do `?RandomForestClassifier` for documentation."
":name" = "RandomForestClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_estimators", ":criterion", ":max_depth", ":min_samples_split", ":min_samples_leaf", ":min_weight_fraction_leaf", ":max_features", ":max_leaf_nodes", ":min_impurity_decrease", ":bootstrap", ":oob_score", ":n_jobs", ":random_state", ":verbose", ":warm_start", ":class_weight"]
":hyperparameter_types" = ["Int64", "String", "Union{Nothing, Int64}", "Union{Float64, Int64}", "Union{Float64, Int64}", "Float64", "Union{Nothing, Float64, Int64, String}", "Union{Nothing, Int64}", "Float64", "Bool", "Bool", "Union{Nothing, Int64}", "Any", "Int64", "Bool", "Any"]

[ScikitLearn.LogisticCVClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s431,1} where _s431<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.LogisticCVClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Logistic regression classifier with internal cross-validation.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load LogisticCVClassifier` to use the model\n→ do `?LogisticCVClassifier` for documentation."
":name" = "LogisticCVClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":Cs", ":fit_intercept", ":cv", ":dual", ":penalty", ":scoring", ":solver", ":tol", ":max_iter", ":class_weight", ":n_jobs", ":verbose", ":refit", ":intercept_scaling", ":multi_class", ":random_state", ":l1_ratios"]
":hyperparameter_types" = ["Union{Int64, AbstractArray{Float64,1}}", "Bool", "Any", "Bool", "String", "Any", "String", "Float64", "Int64", "Any", "Union{Nothing, Int64}", "Int64", "Bool", "Float64", "String", "Any", "Union{Nothing, AbstractArray{Float64,1}}"]

[ScikitLearn.MultiTaskElasticNetRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.MultiTaskElasticNetRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "MultiTaskElasticNetRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "MultiTaskElasticNetRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":l1_ratio", ":fit_intercept", ":normalize", ":copy_X", ":max_iter", ":tol", ":warm_start", ":random_state", ":selection"]
":hyperparameter_types" = ["Float64", "Union{Float64, Array{Float64,1}}", "Bool", "Bool", "Bool", "Int64", "Float64", "Bool", "Any", "String"]

[ScikitLearn.ExtraTreesRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.ExtraTreesRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Extra trees regressor, fits a number of randomized decision trees on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load ExtraTreesRegressor` to use the model\n→ do `?ExtraTreesRegressor` for documentation."
":name" = "ExtraTreesRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":n_estimators", ":criterion", ":max_depth", ":min_samples_split", ":min_samples_leaf", ":min_weight_fraction_leaf", ":max_features", ":max_leaf_nodes", ":min_impurity_decrease", ":bootstrap", ":oob_score", ":n_jobs", ":random_state", ":verbose", ":warm_start"]
":hyperparameter_types" = ["Int64", "String", "Union{Nothing, Int64}", "Union{Float64, Int64}", "Union{Float64, Int64}", "Float64", "Union{Nothing, Float64, Int64, String}", "Union{Nothing, Int64}", "Float64", "Bool", "Bool", "Union{Nothing, Int64}", "Any", "Int64", "Bool"]

[ScikitLearn.LassoRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.LassoRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LassoRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "LassoRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":fit_intercept", ":normalize", ":precompute", ":copy_X", ":max_iter", ":tol", ":warm_start", ":positive", ":random_state", ":selection"]
":hyperparameter_types" = ["Float64", "Bool", "Bool", "Union{Bool, AbstractArray{T,2} where T}", "Bool", "Int64", "Float64", "Bool", "Bool", "Any", "String"]

[ScikitLearn.MultinomialNBClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Count)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MultinomialNBClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "Multinomial naive bayes classifier. It is suitable for classification with discrete features (e.g. word counts for text classification).\n→ based on [ScikitLearn](https://github.com/cstjean/ScikitLearn.jl)\n→ do `@load MultinomialNBClassifier` to use the model\n→ do `?MultinomialNBClassifier` for documentation."
":name" = "MultinomialNBClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha", ":fit_prior", ":class_prior"]
":hyperparameter_types" = ["Float64", "Bool", "Union{Nothing, AbstractArray{T,1} where T}"]

[ScikitLearn.GradientBoostingRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "BSD"
":load_path" = "MLJModels.ScikitLearn_.MLJModels.ScikitLearn_.GradientBoostingRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "GradientBoostingRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "GradientBoostingRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":loss", ":learning_rate", ":n_estimators", ":subsample", ":criterion", ":min_samples_split", ":min_samples_leaf", ":min_weight_fraction_leaf", ":max_depth", ":min_impurity_decrease", ":init", ":random_state", ":max_features", ":alpha", ":verbose", ":max_leaf_nodes", ":warm_start", ":presort", ":validation_fraction", ":n_iter_no_change", ":tol"]
":hyperparameter_types" = ["String", "Float64", "Int64", "Float64", "String", "Union{Float64, Int64}", "Union{Float64, Int64}", "Float64", "Int64", "Float64", "Any", "Any", "Union{Nothing, Float64, Int64, String}", "Float64", "Int64", "Union{Nothing, Int64}", "Bool", "Union{Bool, String}", "Float64", "Union{Nothing, Int64}", "Float64"]

[ScikitLearn.SVMClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s96,1} where _s96<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "unknown"
":load_path" = "MLJModels.ScikitLearn_.SVMClassifier"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "SVMClassifier from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "SVMClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":C", ":kernel", ":degree", ":gamma", ":coef0", ":shrinking", ":tol", ":cache_size", ":max_iter", ":decision_function_shape", ":random_state"]
":hyperparameter_types" = ["Float64", "Union{Function, String}", "Int64", "Union{Float64, String}", "Float64", "Bool", "Float64", "Float64", "Int64", "String", "Any"]

[ScikitLearn.SVMLRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "ScikitLearn"
":package_license" = "unknown"
":load_path" = "MLJModels.ScikitLearn_.SVMLRegressor"
":package_uuid" = "3646fa90-6ef7-5e7e-9f22-8aca16db6324"
":package_url" = "https://github.com/cstjean/ScikitLearn.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "SVMLRegressor from ScikitLearn.jl.\n[Documentation](https://github.com/cstjean/ScikitLearn.jl)."
":name" = "SVMLRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":C", ":loss", ":fit_intercept", ":dual", ":tol", ":max_iter", ":epsilon"]
":hyperparameter_types" = ["Float64", "String", "Bool", "Bool", "Float64", "Int64", "Float64"]

[NaiveBayes.GaussianNBClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s656,1} where _s656<:ScientificTypes.Finite`"
":is_pure_julia" = "`true`"
":package_name" = "NaiveBayes"
":package_license" = "unknown"
":load_path" = "MLJModels.NaiveBayes_.GaussianNBClassifier"
":package_uuid" = "9bbee03b-0db5-5f46-924f-b5c9c21b8c60"
":package_url" = "https://github.com/dfdx/NaiveBayes.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "GaussianNBClassifier from NaiveBayes.jl.\n[Documentation](https://github.com/dfdx/NaiveBayes.jl)."
":name" = "GaussianNBClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = []
":hyperparameter_types" = []

[NaiveBayes.MultinomialNBClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Count)`"
":target_scitype" = "`AbstractArray{_s656,1} where _s656<:ScientificTypes.Finite`"
":is_pure_julia" = "`true`"
":package_name" = "NaiveBayes"
":package_license" = "unknown"
":load_path" = "MLJModels.NaiveBayes_.MultinomialNBClassifier"
":package_uuid" = "9bbee03b-0db5-5f46-924f-b5c9c21b8c60"
":package_url" = "https://github.com/dfdx/NaiveBayes.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "MultinomialNBClassifier from NaiveBayes.jl.\n[Documentation](https://github.com/dfdx/NaiveBayes.jl)."
":name" = "MultinomialNBClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":alpha"]
":hyperparameter_types" = ["Int64"]

[MultivariateStats.ICA]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`true`"
":package_name" = "MultivariateStats"
":package_license" = "unknown"
":load_path" = "MLJModels.MultivariateStats_.ICA"
":package_uuid" = "6f286f6a-111f-5878-ab1e-185364afe411"
":package_url" = "https://github.com/JuliaStats/MultivariateStats.jl"
":is_wrapper" = "`false`"
":docstring" = "ICA from MultivariateStats.jl.\n[Documentation](https://github.com/JuliaStats/MultivariateStats.jl)."
":name" = "ICA"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":clean!", ":fitted_params", ":transform"]
":hyperparameters" = [":k", ":alg", ":fun", ":do_whiten", ":maxiter", ":tol", ":mean", ":winit"]
":hyperparameter_types" = ["Int64", "Union{Nothing, Symbol}", "Union{Nothing, MultivariateStats.ICAGDeriv{T}} where T<:Real", "Union{Nothing, Bool}", "Union{Nothing, Int64}", "Union{Nothing, Real}", "Union{Nothing, Array{Float64,1}, Real}", "Union{Nothing, Array{Float64,2}}"]

[MultivariateStats.RidgeRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MultivariateStats"
":package_license" = "unknown"
":load_path" = "MLJModels.MultivariateStats_.RidgeRegressor"
":package_uuid" = "6f286f6a-111f-5878-ab1e-185364afe411"
":package_url" = "https://github.com/JuliaStats/MultivariateStats.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "RidgeRegressor from MultivariateStats.jl.\n[Documentation](https://github.com/JuliaStats/MultivariateStats.jl)."
":name" = "RidgeRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":lambda"]
":hyperparameter_types" = ["Float64"]

[MultivariateStats.KernelPCA]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`true`"
":package_name" = "MultivariateStats"
":package_license" = "unknown"
":load_path" = "MLJModels.MultivariateStats_.KernelPCA"
":package_uuid" = "6f286f6a-111f-5878-ab1e-185364afe411"
":package_url" = "https://github.com/JuliaStats/MultivariateStats.jl"
":is_wrapper" = "`false`"
":docstring" = "KernelPCA from MultivariateStats.jl.\n[Documentation](https://github.com/JuliaStats/MultivariateStats.jl)."
":name" = "KernelPCA"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":clean!", ":fitted_params", ":transform"]
":hyperparameters" = [":maxoutdim", ":kernel", ":solver", ":inverse", ":β", ":tol", ":maxiter"]
":hyperparameter_types" = ["Union{Nothing, Int64}", "Union{Nothing, Function}", "Union{Nothing, Symbol}", "Union{Nothing, Bool}", "Union{Nothing, Real}", "Union{Nothing, Real}", "Union{Nothing, Int64}"]

[MultivariateStats.PCA]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`true`"
":package_name" = "MultivariateStats"
":package_license" = "unknown"
":load_path" = "MLJModels.MultivariateStats_.PCA"
":package_uuid" = "6f286f6a-111f-5878-ab1e-185364afe411"
":package_url" = "https://github.com/JuliaStats/MultivariateStats.jl"
":is_wrapper" = "`false`"
":docstring" = "PCA from MultivariateStats.jl.\n[Documentation](https://github.com/JuliaStats/MultivariateStats.jl)."
":name" = "PCA"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":clean!", ":fitted_params", ":transform"]
":hyperparameters" = [":maxoutdim", ":method", ":pratio", ":mean"]
":hyperparameter_types" = ["Union{Nothing, Int64}", "Symbol", "Float64", "Union{Nothing, Array{Float64,1}, Real}"]

[DecisionTree.DecisionTreeRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s656,1} where _s656<:ScientificTypes.Continuous`"
":is_pure_julia" = "`true`"
":package_name" = "DecisionTree"
":package_license" = "unknown"
":load_path" = "MLJModels.DecisionTree_.DecisionTreeRegressor"
":package_uuid" = "7806a523-6efd-50cb-b5f6-3fa6f1930dbb"
":package_url" = "https://github.com/bensadeghi/DecisionTree.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "DecisionTreeRegressor from DecisionTree.jl.\n[Documentation](https://github.com/bensadeghi/DecisionTree.jl)."
":name" = "DecisionTreeRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!", ":fitted_params"]
":hyperparameters" = [":pruning_purity_threshold", ":max_depth", ":min_samples_leaf", ":min_samples_split", ":min_purity_increase", ":n_subfeatures", ":post_prune"]
":hyperparameter_types" = ["Float64", "Int64", "Int64", "Int64", "Float64", "Int64", "Bool"]

[DecisionTree.DecisionTreeClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s656,1} where _s656<:ScientificTypes.Finite`"
":is_pure_julia" = "`true`"
":package_name" = "DecisionTree"
":package_license" = "unknown"
":load_path" = "MLJModels.DecisionTree_.DecisionTreeClassifier"
":package_uuid" = "7806a523-6efd-50cb-b5f6-3fa6f1930dbb"
":package_url" = "https://github.com/bensadeghi/DecisionTree.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "DecisionTreeClassifier from DecisionTree.jl.\n[Documentation](https://github.com/bensadeghi/DecisionTree.jl)."
":name" = "DecisionTreeClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":clean!", ":fitted_params"]
":hyperparameters" = [":pruning_purity", ":max_depth", ":min_samples_leaf", ":min_samples_split", ":min_purity_increase", ":n_subfeatures", ":display_depth", ":post_prune", ":merge_purity_threshold", ":pdf_smoothing"]
":hyperparameter_types" = ["Float64", "Int64", "Int64", "Int64", "Float64", "Int64", "Int64", "Bool", "Float64", "Float64"]

[Clustering.KMeans]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`true`"
":package_name" = "Clustering"
":package_license" = "MIT"
":load_path" = "MLJModels.Clustering_.KMeans"
":package_uuid" = "aaaa29a8-35af-508c-8bc3-b662a17a0fe5"
":package_url" = "https://github.com/JuliaStats/Clustering.jl"
":is_wrapper" = "`false`"
":docstring" = "K-Means algorithm: find K centroids corresponding to K clusters in the data.\n\n→ based on [Clustering](https://github.com/JuliaStats/Clustering.jl)\n→ do `@load KMeans` to use the model\n→ do `?KMeans` for documentation."
":name" = "KMeans"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":predict", ":fitted_params", ":transform"]
":hyperparameters" = [":k", ":metric"]
":hyperparameter_types" = ["Int64", "Distances.SemiMetric"]

[Clustering.KMedoids]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":is_pure_julia" = "`true`"
":package_name" = "Clustering"
":package_license" = "MIT"
":load_path" = "MLJModels.Clustering_.KMedoids"
":package_uuid" = "aaaa29a8-35af-508c-8bc3-b662a17a0fe5"
":package_url" = "https://github.com/JuliaStats/Clustering.jl"
":is_wrapper" = "`false`"
":docstring" = "K-Medoids algorithm: find K centroids corresponding to K clusters in the data.\nUnlike K-Means, the centroids are found among data points themselves.\"\n\n→ based on [Clustering](https://github.com/JuliaStats/Clustering.jl)\n→ do `@load KMedoids` to use the model\n→ do `?KMedoids` for documentation."
":name" = "KMedoids"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":predict", ":fitted_params", ":transform"]
":hyperparameters" = [":k", ":metric"]
":hyperparameter_types" = ["Int64", "Distances.SemiMetric"]

[XGBoost.XGBoostCount]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Count,1}`"
":is_pure_julia" = "`false`"
":package_name" = "XGBoost"
":package_license" = "unknown"
":load_path" = "MLJModels.XGBoost_.XGBoostCount"
":package_uuid" = "009559a3-9522-5dbb-924b-0b6ed2b22bb9"
":package_url" = "https://github.com/dmlc/XGBoost.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "XGBoostCount from XGBoost.jl.\n[Documentation](https://github.com/dmlc/XGBoost.jl)."
":name" = "XGBoostCount"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":num_round", ":booster", ":disable_default_eval_metric", ":eta", ":gamma", ":max_depth", ":min_child_weight", ":max_delta_step", ":subsample", ":colsample_bytree", ":colsample_bylevel", ":lambda", ":alpha", ":tree_method", ":sketch_eps", ":scale_pos_weight", ":updater", ":refresh_leaf", ":process_type", ":grow_policy", ":max_leaves", ":max_bin", ":predictor", ":sample_type", ":normalize_type", ":rate_drop", ":one_drop", ":skip_drop", ":feature_selector", ":top_k", ":tweedie_variance_power", ":objective", ":base_score", ":eval_metric", ":seed"]
":hyperparameter_types" = ["Int64", "String", "Int64", "Float64", "Float64", "Int64", "Float64", "Float64", "Float64", "Float64", "Float64", "Float64", "Float64", "String", "Float64", "Float64", "String", "Union{Bool, Int64}", "String", "String", "Int64", "Int64", "String", "String", "String", "Float64", "Any", "Float64", "String", "Int64", "Float64", "Any", "Float64", "Any", "Int64"]

[XGBoost.XGBoostRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "XGBoost"
":package_license" = "unknown"
":load_path" = "MLJModels.XGBoost_.XGBoostRegressor"
":package_uuid" = "009559a3-9522-5dbb-924b-0b6ed2b22bb9"
":package_url" = "https://github.com/dmlc/XGBoost.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "XGBoostRegressor from XGBoost.jl.\n[Documentation](https://github.com/dmlc/XGBoost.jl)."
":name" = "XGBoostRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":num_round", ":booster", ":disable_default_eval_metric", ":eta", ":gamma", ":max_depth", ":min_child_weight", ":max_delta_step", ":subsample", ":colsample_bytree", ":colsample_bylevel", ":lambda", ":alpha", ":tree_method", ":sketch_eps", ":scale_pos_weight", ":updater", ":refresh_leaf", ":process_type", ":grow_policy", ":max_leaves", ":max_bin", ":predictor", ":sample_type", ":normalize_type", ":rate_drop", ":one_drop", ":skip_drop", ":feature_selector", ":top_k", ":tweedie_variance_power", ":objective", ":base_score", ":eval_metric", ":seed"]
":hyperparameter_types" = ["Int64", "String", "Int64", "Float64", "Float64", "Int64", "Float64", "Float64", "Float64", "Float64", "Float64", "Float64", "Float64", "String", "Float64", "Float64", "String", "Union{Bool, Int64}", "String", "String", "Int64", "Int64", "String", "String", "String", "Float64", "Any", "Float64", "String", "Int64", "Float64", "Any", "Float64", "Any", "Int64"]

[XGBoost.XGBoostClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "XGBoost"
":package_license" = "unknown"
":load_path" = "MLJModels.XGBoost_.XGBoostClassifier"
":package_uuid" = "009559a3-9522-5dbb-924b-0b6ed2b22bb9"
":package_url" = "https://github.com/dmlc/XGBoost.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "XGBoostClassifier from XGBoost.jl.\n[Documentation](https://github.com/dmlc/XGBoost.jl)."
":name" = "XGBoostClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":clean!"]
":hyperparameters" = [":num_round", ":booster", ":disable_default_eval_metric", ":eta", ":gamma", ":max_depth", ":min_child_weight", ":max_delta_step", ":subsample", ":colsample_bytree", ":colsample_bylevel", ":lambda", ":alpha", ":tree_method", ":sketch_eps", ":scale_pos_weight", ":updater", ":refresh_leaf", ":process_type", ":grow_policy", ":max_leaves", ":max_bin", ":predictor", ":sample_type", ":normalize_type", ":rate_drop", ":one_drop", ":skip_drop", ":feature_selector", ":top_k", ":tweedie_variance_power", ":objective", ":base_score", ":eval_metric", ":seed"]
":hyperparameter_types" = ["Int64", "String", "Int64", "Float64", "Float64", "Int64", "Float64", "Float64", "Float64", "Float64", "Float64", "Float64", "Float64", "String", "Float64", "Float64", "String", "Union{Bool, Int64}", "String", "String", "Int64", "Int64", "String", "String", "String", "Float64", "Any", "Float64", "String", "Int64", "Float64", "Any", "Float64", "Any", "Int64"]

[MLJModels.ConstantClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":target_scitype" = "`AbstractArray{_s13,1} where _s13<:ScientificTypes.Finite`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "unknown"
":load_path" = "MLJModels.ConstantClassifier"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "ConstantClassifier from MLJModels.jl.\n[Documentation](https://github.com/alan-turing-institute/MLJModels.jl)."
":name" = "ConstantClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = []
":hyperparameter_types" = []

[MLJModels.Standardizer]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.Standardizer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":docstring" = "Standardize (whiten) data."
":name" = "Standardizer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":fitted_params", ":transform"]
":hyperparameters" = [":features"]
":hyperparameter_types" = ["Array{Symbol,1}"]

[MLJModels.DeterministicConstantClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":target_scitype" = "`AbstractArray{_s13,1} where _s13<:ScientificTypes.Finite`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "unknown"
":load_path" = "MLJModels.DeterministicConstantClassifier"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "DeterministicConstantClassifier from MLJModels.jl.\n[Documentation](https://github.com/alan-turing-institute/MLJModels.jl)."
":name" = "DeterministicConstantClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = []
":hyperparameter_types" = []

[MLJModels.OneHotEncoder]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.OneHotEncoder"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":docstring" = "One-Hot-Encoding of the data."
":name" = "OneHotEncoder"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":transform"]
":hyperparameters" = [":features", ":drop_last", ":ordered_factor"]
":hyperparameter_types" = ["Array{Symbol,1}", "Bool", "Bool"]

[MLJModels.StaticTransformer]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.StaticTransformer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":docstring" = "Applies a given data transformation `f` (either a function or callable)."
":name" = "StaticTransformer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":fitted_params", ":transform"]
":hyperparameters" = [":f"]
":hyperparameter_types" = ["Any"]

[MLJModels.UnivariateBoxCoxTransformer]
":input_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":output_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.UnivariateBoxCoxTransformer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":docstring" = "Box-Cox transformation of univariate data."
":name" = "UnivariateBoxCoxTransformer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":fitted_params", ":inverse_transform", ":inverse_transform", ":transform"]
":hyperparameters" = [":n", ":shift"]
":hyperparameter_types" = ["Int64", "Bool"]

[MLJModels.ConstantRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "unknown"
":load_path" = "MLJModels.ConstantRegressor"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "ConstantRegressor from MLJModels.jl.\n[Documentation](https://github.com/alan-turing-institute/MLJModels.jl)."
":name" = "ConstantRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":fitted_params"]
":hyperparameters" = [":distribution_type"]
":hyperparameter_types" = ["Type{D} where D"]

[MLJModels.FeatureSelector]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.FeatureSelector"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":docstring" = "Filter features (columns) of a table by name."
":name" = "FeatureSelector"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":fitted_params", ":transform"]
":hyperparameters" = [":features"]
":hyperparameter_types" = ["Array{Symbol,1}"]

[MLJModels.FillImputer]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":output_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.FillImputer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":docstring" = "Imputes missing data with a fixed value computed on the non-missing values. The way to compute the filler depends on the scitype of the data and can be specified."
":name" = "FillImputer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":transform"]
":hyperparameters" = [":features", ":continuous_fill", ":count_fill", ":finite_fill"]
":hyperparameter_types" = ["Array{Symbol,1}", "Function", "Function", "Function"]

[MLJModels.DeterministicConstantRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:Union{Missing, ScientificTypes.Found})`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "unknown"
":load_path" = "MLJModels.DeterministicConstantRegressor"
":package_uuid" = "https://github.com/alan-turing-institute/MLJModels.jl"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "DeterministicConstantRegressor from MLJModels.jl.\n[Documentation](https://github.com/alan-turing-institute/MLJModels.jl)."
":name" = "DeterministicConstantRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = []
":hyperparameter_types" = []

[MLJModels.UnivariateStandardizer]
":input_scitype" = "`AbstractArray{_s59,1} where _s59<:ScientificTypes.Infinite`"
":output_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "MLJModels"
":package_license" = "MIT"
":load_path" = "MLJModels.UnivariateStandardizer"
":package_uuid" = "d491faf4-2d78-11e9-2867-c94bc002c0b7"
":package_url" = "https://github.com/alan-turing-institute/MLJModels.jl"
":is_wrapper" = "`false`"
":docstring" = "Standardize (whiten) univariate data."
":name" = "UnivariateStandardizer"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":inverse_transform", ":inverse_transform", ":transform", ":transform"]
":hyperparameters" = []
":hyperparameter_types" = []

[LIBSVM.EpsilonSVR]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "LIBSVM"
":package_license" = "unknown"
":load_path" = "MLJModels.LIBSVM_.EpsilonSVR"
":package_uuid" = "b1bec4e5-fd48-53fe-b0cb-9723c09d164b"
":package_url" = "https://github.com/mpastell/LIBSVM.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "EpsilonSVR from LIBSVM.jl.\n[Documentation](https://github.com/mpastell/LIBSVM.jl)."
":name" = "EpsilonSVR"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = [":kernel", ":gamma", ":epsilon", ":cost", ":degree", ":coef0", ":tolerance", ":shrinking"]
":hyperparameter_types" = ["LIBSVM.Kernel.KERNEL", "Float64", "Float64", "Float64", "Int32", "Float64", "Float64", "Bool"]

[LIBSVM.LinearSVC]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "LIBSVM"
":package_license" = "unknown"
":load_path" = "MLJModels.LIBSVM_.LinearSVC"
":package_uuid" = "b1bec4e5-fd48-53fe-b0cb-9723c09d164b"
":package_url" = "https://github.com/mpastell/LIBSVM.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LinearSVC from LIBSVM.jl.\n[Documentation](https://github.com/mpastell/LIBSVM.jl)."
":name" = "LinearSVC"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = [":solver", ":weights", ":tolerance", ":cost", ":p", ":bias"]
":hyperparameter_types" = ["LIBSVM.Linearsolver.LINEARSOLVER", "Union{Nothing, Dict}", "Float64", "Float64", "Float64", "Float64"]

[LIBSVM.NuSVR]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`false`"
":package_name" = "LIBSVM"
":package_license" = "unknown"
":load_path" = "MLJModels.LIBSVM_.NuSVR"
":package_uuid" = "b1bec4e5-fd48-53fe-b0cb-9723c09d164b"
":package_url" = "https://github.com/mpastell/LIBSVM.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "NuSVR from LIBSVM.jl.\n[Documentation](https://github.com/mpastell/LIBSVM.jl)."
":name" = "NuSVR"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = [":kernel", ":gamma", ":nu", ":cost", ":degree", ":coef0", ":tolerance", ":shrinking"]
":hyperparameter_types" = ["LIBSVM.Kernel.KERNEL", "Float64", "Float64", "Float64", "Int32", "Float64", "Float64", "Bool"]

[LIBSVM.NuSVC]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "LIBSVM"
":package_license" = "unknown"
":load_path" = "MLJModels.LIBSVM_.NuSVC"
":package_uuid" = "b1bec4e5-fd48-53fe-b0cb-9723c09d164b"
":package_url" = "https://github.com/mpastell/LIBSVM.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "NuSVC from LIBSVM.jl.\n[Documentation](https://github.com/mpastell/LIBSVM.jl)."
":name" = "NuSVC"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = [":kernel", ":gamma", ":weights", ":nu", ":cost", ":degree", ":coef0", ":tolerance", ":shrinking"]
":hyperparameter_types" = ["LIBSVM.Kernel.KERNEL", "Float64", "Union{Nothing, Dict}", "Float64", "Float64", "Int32", "Float64", "Float64", "Bool"]

[LIBSVM.SVC]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite`"
":is_pure_julia" = "`false`"
":package_name" = "LIBSVM"
":package_license" = "unknown"
":load_path" = "MLJModels.LIBSVM_.SVC"
":package_uuid" = "b1bec4e5-fd48-53fe-b0cb-9723c09d164b"
":package_url" = "https://github.com/mpastell/LIBSVM.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "SVC from LIBSVM.jl.\n[Documentation](https://github.com/mpastell/LIBSVM.jl)."
":name" = "SVC"
":is_supervised" = "`true`"
":prediction_type" = ":deterministic"
":implemented_methods" = [":fit", ":predict"]
":hyperparameters" = [":kernel", ":gamma", ":weights", ":cost", ":degree", ":coef0", ":tolerance", ":shrinking", ":probability"]
":hyperparameter_types" = ["LIBSVM.Kernel.KERNEL", "Float64", "Union{Nothing, Dict}", "Float64", "Int32", "Float64", "Float64", "Bool", "Bool"]

[LIBSVM.OneClassSVM]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":output_scitype" = "`AbstractArray{_s657,1} where _s657<:ScientificTypes.Finite{2}`"
":is_pure_julia" = "`false`"
":package_name" = "LIBSVM"
":package_license" = "unknown"
":load_path" = "MLJModels.LIBSVM_.OneClassSVM"
":package_uuid" = "b1bec4e5-fd48-53fe-b0cb-9723c09d164b"
":package_url" = "https://github.com/mpastell/LIBSVM.jl"
":is_wrapper" = "`false`"
":docstring" = "OneClassSVM from LIBSVM.jl.\n[Documentation](https://github.com/mpastell/LIBSVM.jl)."
":name" = "OneClassSVM"
":is_supervised" = "`false`"
":implemented_methods" = [":fit", ":transform"]
":hyperparameters" = [":kernel", ":gamma", ":nu", ":cost", ":degree", ":coef0", ":tolerance", ":shrinking"]
":hyperparameter_types" = ["LIBSVM.Kernel.KERNEL", "Float64", "Float64", "Float64", "Int32", "Float64", "Float64", "Bool"]

[GLM.LinearBinaryClassifier]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{MLJBase.UnivariateFinite,1}`"
":is_pure_julia" = "`true`"
":package_name" = "GLM"
":package_license" = "MIT"
":load_path" = "MLJModels.GLM_.LinearBinaryClassifier"
":package_uuid" = "38e38edf-8417-5370-95a0-9cbb8c7f171a"
":package_url" = "https://github.com/JuliaStats/GLM.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LinearBinaryClassifier from GLM.jl.\n[Documentation](https://github.com/JuliaStats/GLM.jl)."
":name" = "LinearBinaryClassifier"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":show", ":predict_mean"]
":hyperparameters" = [":fit_intercept", ":link"]
":hyperparameter_types" = ["Bool", "GLM.Link01"]

[GLM.LinearCountRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Count,1}`"
":is_pure_julia" = "`true`"
":package_name" = "GLM"
":package_license" = "MIT"
":load_path" = "MLJModels.GLM_.LinearCountRegressor"
":package_uuid" = "38e38edf-8417-5370-95a0-9cbb8c7f171a"
":package_url" = "https://github.com/JuliaStats/GLM.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LinearCountRegressor from GLM.jl.\n[Documentation](https://github.com/JuliaStats/GLM.jl)."
":name" = "LinearCountRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":show"]
":hyperparameters" = [":fit_intercept", ":distribution", ":link"]
":hyperparameter_types" = ["Bool", "Distributions.Distribution", "GLM.Link"]

[GLM.LinearRegressor]
":input_scitype" = "`ScientificTypes.Table{_s13} where _s13<:(AbstractArray{_s12,1} where _s12<:ScientificTypes.Continuous)`"
":target_scitype" = "`AbstractArray{ScientificTypes.Continuous,1}`"
":is_pure_julia" = "`true`"
":package_name" = "GLM"
":package_license" = "MIT"
":load_path" = "MLJModels.GLM_.LinearRegressor"
":package_uuid" = "38e38edf-8417-5370-95a0-9cbb8c7f171a"
":package_url" = "https://github.com/JuliaStats/GLM.jl"
":is_wrapper" = "`false`"
":supports_weights" = "`false`"
":docstring" = "LinearRegressor from GLM.jl.\n[Documentation](https://github.com/JuliaStats/GLM.jl)."
":name" = "LinearRegressor"
":is_supervised" = "`true`"
":prediction_type" = ":probabilistic"
":implemented_methods" = [":fit", ":predict", ":show"]
":hyperparameters" = [":fit_intercept", ":allowrankdeficient"]
":hyperparameter_types" = ["Bool", "Bool"]
